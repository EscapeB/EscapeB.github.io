{"version":3,"sources":["App.tsx","components/StyleSheet.tsx","components/Editor.tsx","components/Controller.tsx","components/Work.tsx","resource/editor.raw.css","resource/work.raw.md","resource/work.raw.css","serviceWorker.ts","index.tsx"],"names":["TARGET","StyleSheet","props","ReactDom","createPortal","style","document","head","Editor","forwardRef","code","ref","className","dangerouslySetInnerHTML","__html","Controller","pauseStatus","onClick","onStart","undefined","onPause","onSkip","Work","mdStr","speed","App","editorRef","useRef","workRef","editorStrBuffer","styleBuffer","workBuffer","openComment","isPaused","isEnd","useState","setStyle","editorStr","setEditorStr","workStr","setWorkStr","isPausedView","setIsPausedView","scrollToEnd","target","EDITOR","current","scrollTop","scrollHeight","WORK","writeChar","chars","updateView","STYLESHEET","unitRegex","slice","replace","$","length","workData","marked","parse","write","targetData","pos","charsPerWirte","delay","a","endOfSentence","comma","endOfBlock","thisInterval","thisSlice","test","Promise","handleSkip","codeData","i","workCss","then","useEffect","asyncHelper","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.08ff12e4.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport marked from 'marked';\nimport Promise from 'bluebird';\nimport StyleSheet from './components/StyleSheet';\nimport Editor from './components/Editor';\nimport Controller from './components/Controller';\nimport Work from './components/Work';\nimport codeData from './resource/editor.raw.css';\nimport workData from './resource/work.raw.md';\nimport workCss from './resource/work.raw.css';\nimport './App.scss';\nenum TARGET {\n  EDITOR,\n  WORK,\n  STYLESHEET,\n}\n\n//animation speed\nconst speed = process.env.NODE_ENV === 'development' ? 1 : 16;\nconst App: React.FC = () => {\n  /* refs */\n  const editorRef = useRef<HTMLPreElement>(null);\n  const workRef = useRef<HTMLPreElement>(null);\n  // code buffer\n  const editorStrBuffer = useRef<string>('');\n  // the style write buffer\n  const styleBuffer = useRef<string>('');\n  // work string buffer\n  const workBuffer = useRef<string>('');\n  // whether the comment is open\n  const openComment = useRef<boolean>(false);\n  // pause\n  const isPaused = useRef<boolean>(true);\n  // isEnd\n  const isEnd = useRef<boolean>(true);\n\n  /* hook state */\n  const [style, setStyle] = useState<string>('');\n  const [editorStr, setEditorStr] = useState<string>('');\n  const [workStr, setWorkStr] = useState<string>('');\n  const [isPausedView, setIsPausedView] = useState<boolean>(true);\n\n  /**\n   *\n   * @param target target element to scroll\n   */\n  function scrollToEnd(target: TARGET): void {\n    if (target === TARGET.EDITOR && editorRef.current) {\n      editorRef.current.scrollTop = editorRef.current.scrollHeight;\n    } else if (target === TARGET.WORK && workRef.current) {\n      workRef.current.scrollTop = workRef.current.scrollHeight;\n    }\n  }\n  /**\n   *\n   * @param target element to write\n   * @param chars chars to write\n   * @param updateView wheather upate view\n   */\n  function writeChar(target: TARGET, chars: string, updateView = true): void {\n    // if target is style just write\n    if (target === TARGET.STYLESHEET) {\n      styleBuffer.current += chars;\n      // we buffer the chars and render it in <style> tag only when chars matches ';'\n      // which means the end of css properties\n      if (chars === ';') {\n        if (updateView) {\n          setStyle(styleBuffer.current);\n        }\n      }\n    }\n    // if target is editor, we need to handle the chars with html tag\n    else if (target === TARGET.EDITOR) {\n      // if write to editor, we need write it in style also\n      writeChar(TARGET.STYLESHEET, chars, updateView);\n      const commentRegex = /(\\/\\*(?:[^](?!\\/\\*))*\\*)$/;\n      const cssPropertiesRegex = /([a-zA-Z- ^\\n]*):([^:]*)$/;\n      const selectorRegex = /((.|,\\r|,\\r\\n|,\\n)*)$/;\n      const unitRegex = /(\\d+)(px|vh|vw|em|rem|s)*/g;\n      if (openComment.current && chars !== '/') {\n        // Short-circuit during a comment so we don't highlight inside it.\n        editorStrBuffer.current += chars;\n      } else if (chars === '/' && openComment.current === false) {\n        openComment.current = true;\n        editorStrBuffer.current += chars;\n      } else if (\n        chars === '/' &&\n        editorStrBuffer.current.slice(-1) === '*' &&\n        openComment.current === true\n      ) {\n        openComment.current = false;\n        // Unfortunately we can't just open a span and close it, because the browser will helpfully\n        // 'fix' it for us, and we'll end up with a single-character span and an empty closing tag.\n        editorStrBuffer.current = editorStrBuffer.current.replace(\n          commentRegex,\n          '<span class=\"comment\">$1/</span>'\n        );\n      } else if (chars === ';') {\n        editorStrBuffer.current = editorStrBuffer.current.replace(\n          cssPropertiesRegex,\n          (...$: string[]) => {\n            // replace unit in css\n            if ($[2]) {\n              $[2] = $[2].replace(unitRegex, '$1<span class=\"unit\">$2</span>');\n            }\n            return `<span class=\"key\">${$[1]}</span>:<span class=\"value\">${$[2]}</span>;`;\n          }\n        );\n      } else if (chars === '{') {\n        editorStrBuffer.current = editorStrBuffer.current.replace(\n          selectorRegex,\n          '<span class=\"selector\">$1</span>{'\n        );\n      } else {\n        editorStrBuffer.current += chars;\n      }\n      if (updateView) {\n        setEditorStr(editorStrBuffer.current);\n      }\n    } else if (target === TARGET.WORK) {\n      workBuffer.current += chars;\n      if (updateView) {\n        if (workBuffer.current.length >= workData.length) {\n          setWorkStr(marked.parse(workBuffer.current));\n        } else {\n          setWorkStr(workBuffer.current);\n        }\n      }\n    }\n  }\n\n  /**\n   *\n   * @param target which element to write\n   * @param targetData data to wirte\n   * @param pos position of the data string\n   * @param charsPerWirte numbers of char to each wirte\n   * @param delay deleay of each two write\n   */\n  async function write(\n    target: TARGET,\n    targetData: string,\n    pos: number,\n    charsPerWirte: number,\n    delay: number\n  ): Promise<void> {\n    // write until is end\n    while (pos < targetData.length && !isEnd.current) {\n      // Write a character or multiple characters to the buffer.\n      const chars: string = targetData.slice(pos, pos + charsPerWirte);\n      pos += charsPerWirte;\n      writeChar(target, chars, true);\n      // Ensure we stay scrolled to the bottom.\n      scrollToEnd(target);\n      // regex\n      const endOfSentence = /[.?!]\\s$/;\n      const comma = /\\D[,]\\s$/;\n      const endOfBlock = /[^/]\\n\\n$/;\n      let thisInterval = delay;\n      const thisSlice = targetData.slice(pos - 2, pos + 1);\n      // test the wirte chars and wait certain times\n      if (comma.test(thisSlice)) {\n        thisInterval = delay * 30;\n      }\n      if (endOfBlock.test(thisSlice)) {\n        thisInterval = delay * 50;\n      }\n      if (endOfSentence.test(thisSlice)) {\n        thisInterval = delay * 70;\n      }\n      // wait if paused\n      do {\n        await Promise.delay(thisInterval);\n        // if is end (skip) , break this\n        if (isEnd.current) {\n          break;\n        }\n      } while (isPaused.current);\n    }\n  }\n  function handleSkip(): void {\n    // clear all buffers\n    styleBuffer.current = '';\n    editorStrBuffer.current = '';\n    workBuffer.current = '';\n    // write to buffers and don't update view\n    for (const i of codeData) {\n      writeChar(TARGET.EDITOR, i, false);\n    }\n    for (const i of workData) {\n      writeChar(TARGET.WORK, i, false);\n    }\n    for (const i of workCss) {\n      writeChar(TARGET.EDITOR, i, false);\n    }\n    // update views\n    setStyle(styleBuffer.current);\n    setEditorStr(editorStrBuffer.current);\n    setWorkStr(marked(workData));\n    // set paused status\n    setIsPausedView(true);\n    // set variable\n    isPaused.current = true;\n    isEnd.current = true;\n    styleBuffer.current = '';\n    editorStrBuffer.current = '';\n    workBuffer.current = '';\n  }\n  function handlePause(): void {\n    isPaused.current = true;\n    setIsPausedView(true);\n  }\n  async function handleStart(): Promise<void> {\n    isPaused.current = false;\n    setIsPausedView(false);\n    // if animation is end, restart animation.\n    if (isEnd.current) {\n      isEnd.current = false;\n      styleBuffer.current = '';\n      editorStrBuffer.current = '';\n      workBuffer.current = '';\n      setStyle('');\n      setEditorStr('');\n      setWorkStr('');\n      await write(TARGET.EDITOR, codeData, 0, 1, speed);\n      await write(TARGET.WORK, workData, 0, 1, speed);\n      await write(TARGET.EDITOR, workCss, 0, 1, speed / 2).then(() => {\n        // reset variable\n        styleBuffer.current = '';\n        editorStrBuffer.current = '';\n        workBuffer.current = '';\n        isEnd.current = true;\n        setIsPausedView(true);\n      });\n    }\n  }\n\n  // hook effect\n  useEffect(() => {\n    // just show resume on page loaded\n    async function asyncHelper(): Promise<void> {\n      handleSkip();\n    }\n    asyncHelper();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <StyleSheet style={style} />\n      <Editor ref={editorRef} code={editorStr} />\n      <Work ref={workRef} mdStr={workStr} />\n      <Controller\n        pauseStatus={isPausedView}\n        onStart={handleStart}\n        onSkip={handleSkip}\n        onPause={handlePause}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React, { FunctionComponent, PropsWithChildren } from 'react';\nimport ReactDom from 'react-dom';\n\nexport interface StyleSheetProps {\n  style?: string;\n}\nconst StyleSheet: FunctionComponent<StyleSheetProps> = (\n  props: PropsWithChildren<StyleSheetProps>\n) => {\n  return ReactDom.createPortal(<style>{props.style}</style>, document.head);\n};\nexport default StyleSheet;\n","import React, { forwardRef, Ref } from 'react';\n\nexport interface EditorProps {\n  code: string;\n}\nconst EditorCore = (props: EditorProps = { code: '' }, ref: Ref<HTMLPreElement>): JSX.Element => {\n  return <pre ref={ref} className=\"editor\" dangerouslySetInnerHTML={{ __html: props.code }} />;\n};\nconst Editor = forwardRef<HTMLPreElement, EditorProps>(EditorCore);\nexport default Editor;\n","import React, { FunctionComponent, PropsWithChildren } from 'react';\n\nexport interface ControllerProps {\n  onSkip: () => void;\n  onPause: () => void;\n  onStart: () => void;\n  pauseStatus: boolean;\n}\nconst Controller: FunctionComponent<ControllerProps> = (\n  props: PropsWithChildren<ControllerProps>\n) => {\n  return (\n    <div className=\"controller\">\n      {props.pauseStatus ? (\n        <i className=\"iconfont shining\" onClick={props.onStart ? props.onStart : undefined}>\n          &#xe614;\n        </i>\n      ) : (\n        <i className=\"iconfont\" onClick={props.onPause ? props.onPause : undefined}>\n          &#xe668;\n        </i>\n      )}\n\n      <i className=\"iconfont\" onClick={props.onSkip ? props.onSkip : undefined}>\n        &#xe60e;\n      </i>\n    </div>\n  );\n};\nexport default Controller;\n","import React, { forwardRef, Ref } from 'react';\n\nexport interface WorkProps {\n  mdStr?: string;\n}\nconst WorkCore = (props: WorkProps = { mdStr: '' }, ref: Ref<HTMLPreElement>): JSX.Element => {\n  return <pre ref={ref} className=\"work\" dangerouslySetInnerHTML={{ __html: props.mdStr + '' }} />;\n};\nconst Work = forwardRef<HTMLPreElement, WorkProps>(WorkCore);\n\nexport default Work;\n","export default \"/**\\n *\\n * Hey. My name's Sirius Chen. I'm an software engineer.\\n *\\n * It seems that you are interested in how i made my resume.\\n *\\n * Here we go!\\n *\\n * It's an live coding!\\n */\\n\\n/**\\n * We start by animating... well, everything.\\n */\\n\\n* {\\n  transition: all 1s;\\n}\\n\\n/**\\n * Uha, nothing happends. But you'll see next.\\n *\\n * Working in this big empty space is tough.\\n *\\n * We gonna to make an simple editor.\\n *\\n */\\n\\n.editor {\\n  height: 100%;\\n  width: 100%;\\n  background: #303030;\\n  border: 1px solid #ccc;\\n  color: white;\\n  font-size: 14px;\\n  overflow: auto;\\n  font-family: monospace;\\n  padding: 10px 10px 20px;\\n  white-space: pre-wrap;\\n  outline: 0;\\n}\\n\\n/**\\n * Looks a little different, right?\\n * \\n * But we have to go further.\\n */\\n\\n.comment {\\n  color: #857f6b;\\n  font-style: italic;\\n}\\n.selector {\\n  color: #d7ba7d;\\n}\\n.key {\\n  color: #9cdcfe;\\n}\\n.value {\\n  color: #ce9178;\\n}\\n.value .unit {\\n  color: #f92772;\\n}\\n\\n/**\\n * The editor fills the entire screen.\\n *\\n * But we need other places to show our main content.\\n * \\n * We have to do something like this.\\n */\\n\\n.editor {\\n  width: 50%; /*reset the width*/\\n}\\n\\n.work {\\n  width: 50%;\\n  height: 100%;\\n  overflow: auto;\\n}\\n\\n/**\\n * The simple editor is done.\\n *\\n * we turn our eyes to the right part\\n *\\n * I wirte my resume in markdown (with some html),\\n * \\n * which can be easily tranfered to html.\\n */\\n\"","export default \"# [陈哲龙/<span>Sirius Chen</span>](http://sirius-chen.xyz/resume/)\\n\\n## 联系方式\\n- 手机 : 13121859855\\n- Email : haselczl@gmail.com / 463355954@qq.com\\n- QQ/微信 : 463355954 / czl463355954\\n- Github: https://github.com/EscapeB\\n\\n## 基本信息\\n- 男/1994/硕士/未婚\\n- 工作经历 : 2 年\\n- 期望职位: 前端/全栈工程师\\n- 期望城市：北京/杭州/深圳\\n- 期望薪资：面议\\n\\n## 教育背景\\n- <span>2016-2018</span><span>北京交通大学</span><span>软件工程</span><span>硕士</span>\\n- <span>2012-2016</span><span>北京交通大学</span><span>软件工程</span><span>本科</span>\\n\\n## 工作经历\\n### 滴滴 | 2018/07 ~ 今 | 研发工程师\\n2017 年 4 月开始在滴滴实习，之后转正并工作至今。主要负责运营营销系统，数据平台、分析平台及多个 AI 落地项目的研发工作。\\n\\n## 项目经历\\n### 标签系统 | 2017/04 ~ 今\\n  标签系统是一个运营营销系统，基于大数据的用户画像数据，快速筛选出目标用户群体，实现精细化营销，并支持对用户群体进行分析、计算、扩展等等一系列操作。\\n  **项目职责：**\\n    - 完成系统前端架构的设计和 React 技术栈重构。\\n    - 负责系统业务迭代的开发。\\n  **项目成果：**\\n    - 系统接入公司内部全部业务线，支持集团内部 80%以上的运营营销活动。\\n    - 系统日均 UV800+，配套服务调用约 50 亿次/天。\\n### Jormungand 组件库 | 2018/10 ~ 今\\n  Joumungand 组件库是一套基于 React+TypeScript 构建的内部业务组件库，主要用于处理内部多个数据平台的数据业务。\\n  **项目职责：**\\n    - 负责组件库的架构及开发工具链配置(主要包含 TypeScript、Webpack、ESLint、git hook、数据mock、gulp 等)。\\n    - 负责组件库多语言、多环境、消息注册通知方案的设计与实现。\\n    - 负责 80%以上业务组件的开发和迭代。\\n  **项目成果：**\\n    - 成功应用于组内 6 个数据平台/系统的构建，同时接入了 10+个外部系统。\\n    - 减少多个项目开发维护成本，保证不同系统业务的一致性。\\n### 智能客服 | 2019/04 ~ 2019/10\\n  滴滴（各个客户端及小程序端）在线智能客服。基于NLP技术，减少人工客服的压力和成本。\\n  **项目职责：**\\n    - 技术栈迁移重构（jQuery 至 React），主要业务逻辑后移至服务端。\\n    - 多种回答卡片的开发。\\n  **项目成果：**\\n    - 业务逻辑后置，前端只需要做页面渲染，项目开发迭代效率提升。\\n    - 上线后人工客服进线率下降 10%，极大节约人工成本。\\n### [IDEA 平台](http://idea.didichuxing.com) | 2019/08 ~ 2019/10\\n  DiDi IDEA 是一个 AI 开放平台，运用自然语言理解及深度学习算法，为目标企业提供的智能客服机器人。主要采用 Vue 技术栈开发实现。\\n  **项目职责：**\\n    - 负责平台侧前端框架的搭建（基于 VueCLI 3）。\\n    - 负责平台侧机器人、技能、用户三个管理模块的开发。\\n    - 负责[平台文档](http://bot-doc.didichuxing.com)搭建。\\n    - 负责对外 JS-SDK 的开发，机器人客服 H5 页面的开发。\\n  **项目成果：**\\n    - 项目一个月内快速上线，并成功接入外部用户，对内接入 10+个系统/平台。\\n### Node 工具系统 | 2018/12 ~ 今\\n  一系列组内工具服务，帮助系统开发和实现。主要采用 Egg+TypeScript 开发。包含一下工具：\\n    - 接口mock：根据用户配置，基于mockjs提供接口mock功能。\\n    - 报表渲染+发送：canvas 渲染报表图片，上传 cdn，邮件发送报表。\\n    - 文件校验：校验文件格式是否符合特定系统要求。\\n    - 接口正确性、延迟检测：检测特定接口的延迟及数据正确性，并进行可视化展示。\\n  **项目职责：**\\n    - 负责工具系统的全部开发工作。\\n\"","export default \"/**\\n * The resume looks not good.\\n *\\n * We need to add some style.\\n */\\n.work {\\n  box-shadow: -4px 4px 2px 0 rgba(0, 0, 0, 0.3);\\n  padding: 10px;\\n  line-height: 20px;\\n  /* letter-spacing: 1px; */\\n}\\n.work h2 {\\n  padding: 5px;\\n  border-bottom: 1px solid #000;\\n}\\n.work h1 span {\\n  font-size: 1em;\\n}\\n.work a {\\n  text-decoration: none;\\n}\\n.work ul:nth-of-type(1),\\n.work ul:nth-of-type(2),\\n.work ul:nth-of-type(3) {\\n  display: flex;\\n  flex-wrap: wrap;\\n}\\n.work ul:nth-of-type(1) > li,\\n.work ul:nth-of-type(2) > li {\\n  width: 50%;\\n  padding: 5px;\\n}\\n\\n.work ul:nth-of-type(3) > li {\\n  width: 100%;\\n  padding: 5px;\\n}\\n.work ul:nth-of-type(3) span {\\n  margin-right: 2.5rem;\\n}\\n\\n/* Then, we hide our simple editor.\\n *\\n * And resize the resume content.\\n */\\n.editor {\\n  display: none;\\n}\\n.work {\\n  width: 100%;\\n}\\n\\n/**\\n  * Everything is done !\\n  * \\n  * This project is inspired by Samuel Reed's resume (https://www.strml.net).\\n  * \\n  * I rewirte it with React.\\n  * \\n  * If you're interested, you can get project in https://github.com/EscapeB/resume.\\n  * \\n  * Edit and make your own resume :)\\n  */\\n\"","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}